# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # Configure Gradle for optimal use in GitHub Actions, including caching of downloaded dependencies.
    # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0
    
    - name: Grant execute permission for Gradle Wrapper
      run: chmod +x ./gradlew
    
    - name: Generate application.yml
      run: |
        echo "spring:" > src/main/resources/application.yml
        echo "  datasource:" >> src/main/resources/application.yml
        echo "    url: ${{ secrets.DB_URL }}" >> src/main/resources/application.yml
        echo "    username: ${{ secrets.DB_USER_NAME }}" >> src/main/resources/application.yml
        echo "    password: ${{ secrets.DB_PASSWORD }}" >> src/main/resources/application.yml
        echo "    driver-class-name: com.mysql.cj.jdbc.Driver" >> src/main/resources/application.yml
        echo "  jpa:" >> src/main/resources/application.yml
        echo "    database-platform: org.hibernate.dialect.MySQL8Dialect" >> src/main/resources/application.yml
        echo "    hibernate:" >> src/main/resources/application.yml
        echo "      ddl-auto: update" >> src/main/resources/application.yml

    # Environment variables section
    - name: Build with Gradle Wrapper
      run: ./gradlew build
      env:
        OPEN_AI_API_KEY: ${{ secrets.OPEN_AI_API_KEY }}
        OPEN_AI_API_URL: ${{ secrets.OPEN_AI_API_URL }}
        AWS_CREDENTIALS_ACCESS_KEY: ${{ secrets.AWS_CREDENTIALS_ACCESS_KEY }}
        AWS_CREDENTIALS_SECRET_KEY: ${{ secrets.AWS_CREDENTIALS_SECRET_KEY }}
        AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }}
        DB_URL: ${{ secrets.DB_URL }}
        DB_USER_NAME: ${{ secrets.DB_USER_NAME }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}

    # NOTE: The Gradle Wrapper is the default and recommended way to run Gradle (https://docs.gradle.org/current/userguide/gradle_wrapper.html).
    # If your project does not have the Gradle Wrapper configured, you can use the following configuration to run Gradle with a specified version.
    #
    # - name: Setup Gradle
    #   uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0
    #   with:
    #     gradle-version: '8.9'
    #
    # - name: Build with Gradle 8.9
    #   run: gradle build

  dependency-submission:

    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # Generates and submits a dependency graph, enabling Dependabot Alerts for all project dependencies.
    # See: https://github.com/gradle/actions/blob/main/dependency-submission/README.md
    - name: Generate and submit dependency graph
      uses: gradle/actions/dependency-submission@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0
